{% set name = "bmf" %}
{% set cuda_major = (cuda_compiler_version|default("0.0")).split(".")[0] %}
{% set version = "0.0.12" %}
{% set commit = "10fde57672d125cf3a5eac7d9b30b924e4603d28" %}
{% set build = 0 %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  - url: https://github.com/BabitMF/bmf/archive/refs/tags/v{{ version }}.tar.gz
    sha256: baf16c61aebfc5a494c00697e99a84788fba586d2809499f019a6107eb4b6218
    patches:
      # we don't need the python command wrapper
      - patches/dont_install_commands.patch
      # make standard requirement optional to build with CUDA 11
      - patches/relax_cxx_standard_requirement.patch
      # Dispatch case uses constexpr
      - patches/msvc_use_conformance_lambda.patch  # [win]
      # Windows library are under binary dir
      - patches/search_library_in_binary_dir.patch  # [win]
  - url: https://github.com/BabitMF/bmf/releases/download/files/win_rootfs.tar.gz  # [win]
    sha256: 6ab8e8df127c5d54b6c64f9ae4f4680f012f0b3b916e4f003e00963399580367  # [win]
    folder: win_rootfs  # [win]
    patches:   # [win]
      # don't let windows.h define MIN and MAX macro
      - patches/win32_unistd_nominmax.patch  # [win]

build:
  number: {{ build }}
  {% if cuda_major == "11" %}
  skip: true  # [linux and (aarch64 or ppc64le)]
  {% endif %}
  string: cuda{{ cuda_compiler_version | replace('.', '') }}_py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [cuda_compiler_version != "None"]
  string: cpu_py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [cuda_compiler_version == "None"]
  ignore_run_exports:
    - glog
    - gtest
  missing_dso_whitelist:
    - "*/nvcuda.dll"    # [win]
    - "*/_hmp.*"        # [win]
    - "*/libcuda.so.1"  # [linux]
  script_env:
    - BMF_BUILD_ENABLE_CUDA=OFF                          # [cuda_compiler_version == "None"]
    - BMF_BUILD_ENABLE_CUDA=ON                           # [cuda_compiler_version != "None"]
    - CUDA_COMPILER_VERSION={{ cuda_compiler_version }}  # [cuda_compiler_version != "None"]
    - GIT_SHA={{ commit }}

requirements:
  build:
    - {{ compiler('c') }}
    - {{ stdlib("c") }}
    - {{ compiler('cxx') }}
    - {{ compiler('cuda') }}              # [cuda_compiler_version != "None"]
    - python                              # [build_platform != target_platform]
    - cross-python_{{ target_platform }}  # [build_platform != target_platform]
    - pybind11                            # [build_platform != target_platform]
    - cmake
    - ninja
    - pkg-config
    - patch     # [unix]
    - m2-patch  # [win]
    - patchelf  # [linux]
  host:
    - cuda-version  {{ cuda_compiler_version }}  # [cuda_compiler_version != "None"]
    {% if cuda_major == "12" %}
    - cuda-cudart-dev
    - cuda-compat                                # [linux]
    {% else %}
    - cudatoolkit                                # [cuda_compiler_version != "None"]
    {% endif %}
    - ffmpeg  =4.4
    - nlohmann_json
    - glog
    - gtest
    - fmt  =7
    - benchmark
    - spdlog  =1.8
    - backward-cpp
    - pybind11
    - dlpack
    - numpy
    - pip
    - python
    - setuptools
    - ncurses               # [unix]
    - dlfcn-win32  >=1.4.1  # [win]
  run:
    - elfutils  # [linux]
    - ucrt      # [win]
    - python
    - ncurses   # [unix]

test:
  requires:
    - pip
    # To provide the CUDA driver library
    {% if cuda_major == "12" %}
    - cuda-compat  # [linux]
    {% endif %}
  imports:
    # CUDA version cannot be tested here because we haven't planted our nvcuda.dll stub library.
    - bmf  # [cuda_compiler_version == "None"]
  files:
    - api_test.py
    - test_graph.json
    # Stub library. See nvcuda_stub.cpp for source.
    - nvcuda.dll  # [win and cuda_compiler_version != "None"]
  commands:
    - COPY nvcuda.dll %LIBRARY_BIN%\nvcuda.dll  # [win and cuda_compiler_version != "None"]
    - pip check
    - module_manager list
    - module_manager dump c_ffmpeg_decoder
    - module_manager dump pass_through
    - ffmpeg -f lavfi -i testsrc=duration=1:size=1280x720:rate=30 testsrc.mp4
    - '"$PYTHON" api_test.py'   # [not win]
    - '"%PYTHON%" api_test.py'  # [win]
    - run_bmf_graph test_graph.json

about:
  home: https://babitmf.github.io
  license: Apache-2.0
  license_family: Apache
  license_file: LICENSE
  summary: |
    Cross-platform, multi-language, customizable video processing framework
    with strong GPU acceleration
  description: |
    BMF (Babit Multimedia Framework) is a cross-platform, multi-language,
    customizable multimedia processing framework developed by ByteDance.
    With over 4 years of testing and improvements, BMF has been tailored to
    adeptly tackle challenges in our real-world production environments.
    It is currently widely used in ByteDance's video streaming,
    live transcoding, cloud editing and mobile pre/post processing scenarios.
    More than 2 billion videos are processed by the framework every day.
  doc_url: https://babitmf.github.io/docs/bmf/
  dev_url: https://github.com/BabitMF/bmf

extra:
  recipe-maintainers:
    - taoboyang
    - HuHeng
    - sfeiwong
    - tongyuantongyu
